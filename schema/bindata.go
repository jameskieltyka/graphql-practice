// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/cluster.graphql
// schema/types/node.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x0b\x83\x30\x10\x85\xf7\xfc\x8a\xe7\xa6\xd0\x5f\x70\x6b\xbb\x38\x54\x28\x1d\x8b\x43\x30\x87\x15\x6a\x2c\xc9\x65\x90\xe2\x7f\x2f\x31\x49\xb1\x53\x72\xef\xbd\xbb\xf7\xf9\xe1\xc9\xb3\x06\x3e\x0a\x00\x6e\x81\xdd\x4a\xe9\xd9\x85\x39\x88\x96\x69\xb1\x84\x6b\xfe\xa9\x4d\x29\x59\xdf\x9c\x42\x79\x6f\x64\xe9\x16\xc3\xb5\xd5\x33\x13\xee\xe2\x26\x3b\x56\x0d\x21\x8a\xc7\x80\xaf\x87\x57\xf0\xc2\xae\x35\x84\xf6\xd2\x10\x1e\x51\xae\xfa\x12\x3a\x27\xdb\xd7\xd1\xca\x43\xd5\xff\x3a\x0b\x44\xae\xd5\xc6\xec\xb5\x7f\x47\x4f\xb0\x8b\xe1\xee\x40\x52\x40\xb6\x6f\x00\x00\x00\xff\xff\x05\x77\x72\x34\xed\x00\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 237, mode: os.FileMode(420), modTime: time.Unix(1553128982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesClusterGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\xce\x29\x2d\x2e\x49\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x28\x2e\x29\xca\xcc\x4b\x57\x84\x88\xe4\xa7\xa4\x16\x5b\x29\x44\xfb\xe5\xa7\xa4\x2a\xc6\x72\xd5\x02\x02\x00\x00\xff\xff\x6f\xa5\x28\xa9\x35\x00\x00\x00")

func schemaTypesClusterGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesClusterGraphql,
		"schema/types/cluster.graphql",
	)
}

func schemaTypesClusterGraphql() (*asset, error) {
	bytes, err := schemaTypesClusterGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/cluster.graphql", size: 53, mode: os.FileMode(420), modTime: time.Unix(1553055882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesNodeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\xcb\x4f\x49\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x28\x2e\x29\xca\xcc\x4b\x57\x04\x8b\x24\xe7\x94\x16\x97\xa4\x16\x79\xa6\x58\x29\x78\xba\x28\x72\xd5\x02\x02\x00\x00\xff\xff\x63\x6f\x22\x25\x32\x00\x00\x00")

func schemaTypesNodeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesNodeGraphql,
		"schema/types/node.graphql",
	)
}

func schemaTypesNodeGraphql() (*asset, error) {
	bytes, err := schemaTypesNodeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/node.graphql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1553055926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/cluster.graphql": schemaTypesClusterGraphql,
	"schema/types/node.graphql": schemaTypesNodeGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"cluster.graphql": &bintree{schemaTypesClusterGraphql, map[string]*bintree{}},
			"node.graphql": &bintree{schemaTypesNodeGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

